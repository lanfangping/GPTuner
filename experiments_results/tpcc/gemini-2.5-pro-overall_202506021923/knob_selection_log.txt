[2025-06-02 19:23:54,701 INFO] [knob_selection.py:select_on_system_level:58] select_on_system_level - 0th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['DateStyle', 'IntervalStyle', 'TimeZone', 'allow_in_place_tablespaces', 'allow_system_table_mods', 'application_name', 'archive_cleanup_command', 'archive_command', 'archive_mode', 'archive_timeout', 'array_nulls', 'authentication_timeout', 'autovacuum', 'autovacuum_analyze_scale_factor', 'autovacuum_analyze_threshold', 'autovacuum_freeze_max_age', 'autovacuum_max_workers', 'autovacuum_multixact_freeze_max_age', 'autovacuum_naptime', 'autovacuum_vacuum_cost_delay', 'autovacuum_vacuum_cost_limit', 'autovacuum_vacuum_insert_scale_factor', 'autovacuum_vacuum_insert_threshold', 'autovacuum_vacuum_scale_factor', 'autovacuum_vacuum_threshold', 'autovacuum_work_mem', 'backend_flush_after', 'backslash_quote', 'backtrace_functions', 'bgwriter_delay']
DBMS: postgres;
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:24:56,531 INFO] [knob_selection.py:select_on_system_level:60] select_on_system_level - 0th response: {'DateStyle': 0.0, 'IntervalStyle': 0.0, 'TimeZone': 0.0, 'allow_in_place_tablespaces': 0.0, 'allow_system_table_mods': 0.0, 'application_name': 0.0, 'archive_cleanup_command': 0.0, 'archive_command': 0.5, 'archive_mode': 0.2, 'archive_timeout': 0.1, 'array_nulls': 0.0, 'authentication_timeout': 0.0, 'autovacuum': 1.0, 'autovacuum_analyze_scale_factor': 0.85, 'autovacuum_analyze_threshold': 0.85, 'autovacuum_freeze_max_age': 0.75, 'autovacuum_max_workers': 0.9, 'autovacuum_multixact_freeze_max_age': 0.75, 'autovacuum_naptime': 0.6, 'autovacuum_vacuum_cost_delay': 0.9, 'autovacuum_vacuum_cost_limit': 0.9, 'autovacuum_vacuum_insert_scale_factor': 0.75, 'autovacuum_vacuum_insert_threshold': 0.75, 'autovacuum_vacuum_scale_factor': 0.85, 'autovacuum_vacuum_threshold': 0.85, 'autovacuum_work_mem': 0.8, 'backend_flush_after': 0.3, 'backslash_quote': 0.0, 'backtrace_functions': 0.0, 'bgwriter_delay': 0.85}
[2025-06-02 19:24:56,860 INFO] [knob_selection.py:select_on_system_level:58] select_on_system_level - 30th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['bgwriter_flush_after', 'bgwriter_lru_maxpages', 'bgwriter_lru_multiplier', 'block_size', 'bonjour', 'bonjour_name', 'bytea_output', 'check_function_bodies', 'checkpoint_completion_target', 'checkpoint_flush_after', 'checkpoint_timeout', 'checkpoint_warning', 'client_connection_check_interval', 'client_encoding', 'client_min_messages', 'cluster_name', 'commit_delay', 'commit_siblings', 'compute_query_id', 'config_file', 'constraint_exclusion', 'cpu_index_tuple_cost', 'cpu_operator_cost', 'cpu_tuple_cost', 'cursor_tuple_fraction', 'data_checksums', 'data_directory', 'data_directory_mode', 'data_sync_retry', 'db_user_namespace']
DBMS: postgres;
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:25:45,473 INFO] [knob_selection.py:select_on_system_level:60] select_on_system_level - 30th response: {'bgwriter_flush_after': 0.6, 'bgwriter_lru_maxpages': 0.7, 'bgwriter_lru_multiplier': 0.6, 'block_size': 0.1, 'bonjour': 0.0, 'bonjour_name': 0.0, 'bytea_output': 0.0, 'check_function_bodies': 0.0, 'checkpoint_completion_target': 0.9, 'checkpoint_flush_after': 0.6, 'checkpoint_timeout': 0.9, 'checkpoint_warning': 0.0, 'client_connection_check_interval': 0.1, 'client_encoding': 0.1, 'client_min_messages': 0.0, 'cluster_name': 0.0, 'commit_delay': 0.6, 'commit_siblings': 0.5, 'compute_query_id': 0.2, 'config_file': 0.0, 'constraint_exclusion': 0.8, 'cpu_index_tuple_cost': 0.7, 'cpu_operator_cost': 0.7, 'cpu_tuple_cost': 0.7, 'cursor_tuple_fraction': 0.5, 'data_checksums': 0.2, 'data_directory': 0.0, 'data_directory_mode': 0.0, 'data_sync_retry': 0.0, 'db_user_namespace': 0.0}
[2025-06-02 19:25:45,476 INFO] [knob_selection.py:select_on_system_level:58] select_on_system_level - 60th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['deadlock_timeout', 'debug_assertions', 'debug_discard_caches', 'debug_pretty_print', 'debug_print_parse', 'debug_print_plan', 'debug_print_rewritten', 'default_statistics_target', 'default_table_access_method', 'default_tablespace', 'default_text_search_config', 'default_toast_compression', 'default_transaction_deferrable', 'default_transaction_isolation', 'default_transaction_read_only', 'dynamic_library_path', 'dynamic_shared_memory_type', 'effective_cache_size', 'effective_io_concurrency', 'enable_async_append', 'enable_bitmapscan', 'enable_gathermerge', 'enable_hashagg', 'enable_hashjoin', 'enable_incremental_sort', 'enable_indexonlyscan', 'enable_indexscan', 'enable_material', 'enable_memoize', 'enable_mergejoin']
DBMS: postgres;
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:26:46,299 INFO] [knob_selection.py:select_on_system_level:60] select_on_system_level - 60th response: {'deadlock_timeout': 0.3, 'debug_assertions': 0.7, 'debug_discard_caches': 0.7, 'debug_pretty_print': 0.0, 'debug_print_parse': 0.7, 'debug_print_plan': 0.7, 'debug_print_rewritten': 0.7, 'default_statistics_target': 0.8, 'default_table_access_method': 0.4, 'default_tablespace': 0.6, 'default_text_search_config': 0.2, 'default_toast_compression': 0.5, 'default_transaction_deferrable': 0.1, 'default_transaction_isolation': 0.8, 'default_transaction_read_only': 0.3, 'dynamic_library_path': 0.0, 'dynamic_shared_memory_type': 0.2, 'effective_cache_size': 0.9, 'effective_io_concurrency': 0.7, 'enable_async_append': 0.4, 'enable_bitmapscan': 0.7, 'enable_gathermerge': 0.5, 'enable_hashagg': 0.7, 'enable_hashjoin': 0.8, 'enable_incremental_sort': 0.4, 'enable_indexonlyscan': 0.8, 'enable_indexscan': 0.9, 'enable_material': 0.5, 'enable_memoize': 0.4, 'enable_mergejoin': 0.7}
[2025-06-02 19:26:46,302 INFO] [knob_selection.py:select_on_system_level:58] select_on_system_level - 90th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['enable_nestloop', 'enable_parallel_append', 'enable_parallel_hash', 'enable_partition_pruning', 'enable_partitionwise_aggregate', 'enable_partitionwise_join', 'enable_seqscan', 'enable_sort', 'enable_tidscan', 'escape_string_warning', 'event_source', 'exit_on_error', 'extension_destdir', 'external_pid_file', 'extra_float_digits', 'force_parallel_mode', 'from_collapse_limit', 'fsync', 'full_page_writes', 'geqo', 'geqo_effort', 'geqo_generations', 'geqo_pool_size', 'geqo_seed', 'geqo_selection_bias', 'geqo_threshold', 'gin_fuzzy_search_limit', 'gin_pending_list_limit', 'hash_mem_multiplier', 'hba_file']
DBMS: postgres;
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:27:40,468 INFO] [knob_selection.py:select_on_system_level:60] select_on_system_level - 90th response: {'enable_nestloop': 0.7, 'enable_parallel_append': 0.6, 'enable_parallel_hash': 0.8, 'enable_partition_pruning': 0.9, 'enable_partitionwise_aggregate': 0.7, 'enable_partitionwise_join': 0.7, 'enable_seqscan': 0.9, 'enable_sort': 0.7, 'enable_tidscan': 0.3, 'escape_string_warning': 0.0, 'event_source': 0.0, 'exit_on_error': 0.0, 'extension_destdir': 0.0, 'external_pid_file': 0.0, 'extra_float_digits': 0.1, 'force_parallel_mode': 0.8, 'from_collapse_limit': 0.6, 'fsync': 1.0, 'full_page_writes': 0.8, 'geqo': 0.7, 'geqo_effort': 0.5, 'geqo_generations': 0.5, 'geqo_pool_size': 0.5, 'geqo_seed': 0.2, 'geqo_selection_bias': 0.5, 'geqo_threshold': 0.6, 'gin_fuzzy_search_limit': 0.4, 'gin_pending_list_limit': 0.7, 'hash_mem_multiplier': 0.7, 'hba_file': 0.0}
[2025-06-02 19:27:40,470 INFO] [knob_selection.py:select_on_system_level:58] select_on_system_level - 120th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['hot_standby', 'hot_standby_feedback', 'huge_page_size', 'huge_pages', 'ident_file', 'idle_in_transaction_session_timeout', 'idle_session_timeout', 'ignore_checksum_failure', 'ignore_invalid_pages', 'ignore_system_indexes', 'in_hot_standby', 'integer_datetimes', 'jit', 'jit_above_cost', 'jit_debugging_support', 'jit_dump_bitcode', 'jit_expressions', 'jit_inline_above_cost', 'jit_optimize_above_cost', 'jit_profiling_support', 'jit_provider', 'jit_tuple_deforming', 'join_collapse_limit', 'krb_caseins_users', 'krb_server_keyfile', 'lc_collate', 'lc_ctype', 'lc_messages', 'lc_monetary', 'lc_numeric']
DBMS: postgres;
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:28:29,519 INFO] [knob_selection.py:select_on_system_level:60] select_on_system_level - 120th response: {'hot_standby': 0.6, 'hot_standby_feedback': 0.7, 'huge_page_size': 0.1, 'huge_pages': 0.8, 'ident_file': 0.0, 'idle_in_transaction_session_timeout': 0.7, 'idle_session_timeout': 0.4, 'ignore_checksum_failure': 0.0, 'ignore_invalid_pages': 0.0, 'ignore_system_indexes': 0.0, 'in_hot_standby': 0.0, 'integer_datetimes': 0.0, 'jit': 0.9, 'jit_above_cost': 0.8, 'jit_debugging_support': 0.0, 'jit_dump_bitcode': 0.0, 'jit_expressions': 0.7, 'jit_inline_above_cost': 0.6, 'jit_optimize_above_cost': 0.6, 'jit_profiling_support': 0.0, 'jit_provider': 0.1, 'jit_tuple_deforming': 0.7, 'join_collapse_limit': 0.5, 'krb_caseins_users': 0.0, 'krb_server_keyfile': 0.0, 'lc_collate': 0.6, 'lc_ctype': 0.6, 'lc_messages': 0.0, 'lc_monetary': 0.0, 'lc_numeric': 0.0}
[2025-06-02 19:28:29,522 INFO] [knob_selection.py:select_on_system_level:58] select_on_system_level - 150th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['lc_time', 'listen_addresses', 'lo_compat_privileges', 'local_preload_libraries', 'lock_timeout', 'log_autovacuum_min_duration', 'log_checkpoints', 'log_connections', 'log_destination', 'log_directory', 'log_disconnections', 'log_duration', 'log_error_verbosity', 'log_executor_stats', 'log_file_mode', 'log_filename', 'log_hostname', 'log_line_prefix', 'log_lock_waits', 'log_min_duration_sample', 'log_min_duration_statement', 'log_min_error_statement', 'log_min_messages', 'log_parameter_max_length', 'log_parameter_max_length_on_error', 'log_parser_stats', 'log_planner_stats', 'log_recovery_conflict_waits', 'log_replication_commands', 'log_rotation_age']
DBMS: postgres;
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:29:38,743 INFO] [knob_selection.py:select_on_system_level:60] select_on_system_level - 150th response: {'lc_time': 0.0, 'listen_addresses': 0.1, 'lo_compat_privileges': 0.0, 'local_preload_libraries': 0.4, 'lock_timeout': 0.8, 'log_autovacuum_min_duration': 0.6, 'log_checkpoints': 0.7, 'log_connections': 0.3, 'log_destination': 0.0, 'log_directory': 0.0, 'log_disconnections': 0.3, 'log_duration': 0.1, 'log_error_verbosity': 0.0, 'log_executor_stats': 0.1, 'log_file_mode': 0.0, 'log_filename': 0.0, 'log_hostname': 0.2, 'log_line_prefix': 0.0, 'log_lock_waits': 0.9, 'log_min_duration_sample': 0.7, 'log_min_duration_statement': 0.9, 'log_min_error_statement': 0.2, 'log_min_messages': 0.4, 'log_parameter_max_length': 0.1, 'log_parameter_max_length_on_error': 0.1, 'log_parser_stats': 0.1, 'log_planner_stats': 0.2, 'log_recovery_conflict_waits': 0.7, 'log_replication_commands': 0.3, 'log_rotation_age': 0.0}
[2025-06-02 19:29:38,746 INFO] [knob_selection.py:select_on_system_level:58] select_on_system_level - 180th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['log_rotation_size', 'log_statement', 'log_statement_sample_rate', 'log_statement_stats', 'log_temp_files', 'log_timezone', 'log_transaction_sample_rate', 'log_truncate_on_rotation', 'logging_collector', 'logical_decoding_work_mem', 'maintenance_io_concurrency', 'maintenance_work_mem', 'max_connections', 'max_files_per_process', 'max_function_args', 'max_identifier_length', 'max_index_keys', 'max_locks_per_transaction', 'max_logical_replication_workers', 'max_parallel_maintenance_workers', 'max_parallel_workers', 'max_parallel_workers_per_gather', 'max_pred_locks_per_page', 'max_pred_locks_per_relation', 'max_pred_locks_per_transaction', 'max_prepared_transactions', 'max_replication_slots', 'max_slot_wal_keep_size', 'max_stack_depth', 'max_standby_archive_delay']
DBMS: postgres;
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:30:31,993 INFO] [knob_selection.py:select_on_system_level:60] select_on_system_level - 180th response: {'log_rotation_size': 0.1, 'log_statement': 0.7, 'log_statement_sample_rate': 0.4, 'log_statement_stats': 0.5, 'log_temp_files': 0.3, 'log_timezone': 0.0, 'log_transaction_sample_rate': 0.4, 'log_truncate_on_rotation': 0.0, 'logging_collector': 0.2, 'logical_decoding_work_mem': 0.7, 'maintenance_io_concurrency': 0.8, 'maintenance_work_mem': 0.9, 'max_connections': 0.9, 'max_files_per_process': 0.2, 'max_function_args': 0.0, 'max_identifier_length': 0.0, 'max_index_keys': 0.0, 'max_locks_per_transaction': 0.7, 'max_logical_replication_workers': 0.7, 'max_parallel_maintenance_workers': 0.8, 'max_parallel_workers': 0.9, 'max_parallel_workers_per_gather': 0.9, 'max_pred_locks_per_page': 0.2, 'max_pred_locks_per_relation': 0.2, 'max_pred_locks_per_transaction': 0.3, 'max_prepared_transactions': 0.6, 'max_replication_slots': 0.7, 'max_slot_wal_keep_size': 0.8, 'max_stack_depth': 0.1, 'max_standby_archive_delay': 0.5}
[2025-06-02 19:30:31,996 INFO] [knob_selection.py:select_on_system_level:58] select_on_system_level - 210th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['max_standby_streaming_delay', 'max_sync_workers_per_subscription', 'max_wal_senders', 'max_wal_size', 'max_worker_processes', 'min_dynamic_shared_memory', 'min_parallel_index_scan_size', 'min_parallel_table_scan_size', 'min_wal_size', 'old_snapshot_threshold', 'parallel_leader_participation', 'parallel_setup_cost', 'parallel_tuple_cost', 'password_encryption', 'pg_stat_statements.max', 'pg_stat_statements.save', 'pg_stat_statements.track', 'pg_stat_statements.track_planning', 'pg_stat_statements.track_utility', 'plan_cache_mode', 'port', 'post_auth_delay', 'pre_auth_delay', 'primary_conninfo', 'primary_slot_name', 'promote_trigger_file', 'quote_all_identifiers', 'random_page_cost', 'recovery_end_command', 'recovery_init_sync_method']
DBMS: postgres;
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:31:33,947 INFO] [knob_selection.py:select_on_system_level:60] select_on_system_level - 210th response: {'max_standby_streaming_delay': 0.4, 'max_sync_workers_per_subscription': 0.5, 'max_wal_senders': 0.7, 'max_wal_size': 0.9, 'max_worker_processes': 0.8, 'min_dynamic_shared_memory': 0.1, 'min_parallel_index_scan_size': 0.7, 'min_parallel_table_scan_size': 0.7, 'min_wal_size': 0.6, 'old_snapshot_threshold': 0.7, 'parallel_leader_participation': 0.6, 'parallel_setup_cost': 0.8, 'parallel_tuple_cost': 0.8, 'password_encryption': 0.1, 'pg_stat_statements.max': 0.3, 'pg_stat_statements.save': 0.1, 'pg_stat_statements.track': 0.4, 'pg_stat_statements.track_planning': 0.3, 'pg_stat_statements.track_utility': 0.2, 'plan_cache_mode': 0.7, 'port': 0.0, 'post_auth_delay': 0.0, 'pre_auth_delay': 0.0, 'primary_conninfo': 0.3, 'primary_slot_name': 0.4, 'promote_trigger_file': 0.0, 'quote_all_identifiers': 0.0, 'random_page_cost': 0.9, 'recovery_end_command': 0.0, 'recovery_init_sync_method': 0.1}
[2025-06-02 19:31:33,949 INFO] [knob_selection.py:select_on_system_level:58] select_on_system_level - 240th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['recovery_min_apply_delay', 'recovery_target', 'recovery_target_action', 'recovery_target_inclusive', 'recovery_target_lsn', 'recovery_target_name', 'recovery_target_time', 'recovery_target_timeline', 'recovery_target_xid', 'remove_temp_files_after_crash', 'restart_after_crash', 'restore_command', 'row_security', 'search_path', 'segment_size', 'seq_page_cost', 'server_encoding', 'server_version', 'server_version_num', 'session_preload_libraries', 'session_replication_role', 'shared_buffers', 'shared_memory_type', 'shared_preload_libraries', 'ssl', 'ssl_ca_file', 'ssl_cert_file', 'ssl_ciphers', 'ssl_crl_dir', 'ssl_crl_file']
DBMS: postgres;
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:32:31,192 INFO] [knob_selection.py:select_on_system_level:60] select_on_system_level - 240th response: {'recovery_min_apply_delay': 0.2, 'recovery_target': 0.0, 'recovery_target_action': 0.0, 'recovery_target_inclusive': 0.0, 'recovery_target_lsn': 0.0, 'recovery_target_name': 0.0, 'recovery_target_time': 0.0, 'recovery_target_timeline': 0.0, 'recovery_target_xid': 0.0, 'remove_temp_files_after_crash': 0.1, 'restart_after_crash': 0.0, 'restore_command': 0.1, 'row_security': 0.7, 'search_path': 0.6, 'segment_size': 0.1, 'seq_page_cost': 0.8, 'server_encoding': 0.1, 'server_version': 0.0, 'server_version_num': 0.0, 'session_preload_libraries': 0.4, 'session_replication_role': 0.7, 'shared_buffers': 1.0, 'shared_memory_type': 0.3, 'shared_preload_libraries': 0.8, 'ssl': 0.6, 'ssl_ca_file': 0.0, 'ssl_cert_file': 0.0, 'ssl_ciphers': 0.4, 'ssl_crl_dir': 0.0, 'ssl_crl_file': 0.0}
[2025-06-02 19:32:31,195 INFO] [knob_selection.py:select_on_system_level:58] select_on_system_level - 270th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['ssl_dh_params_file', 'ssl_ecdh_curve', 'ssl_key_file', 'ssl_library', 'ssl_max_protocol_version', 'ssl_min_protocol_version', 'ssl_passphrase_command', 'ssl_passphrase_command_supports_reload', 'ssl_prefer_server_ciphers', 'standard_conforming_strings', 'statement_timeout', 'stats_temp_directory', 'superuser_reserved_connections', 'synchronize_seqscans', 'synchronous_commit', 'synchronous_standby_names', 'syslog_facility', 'syslog_ident', 'syslog_sequence_numbers', 'syslog_split_messages', 'tcp_keepalives_count', 'tcp_keepalives_idle', 'tcp_keepalives_interval', 'tcp_user_timeout', 'temp_buffers', 'temp_file_limit', 'temp_tablespaces', 'timezone_abbreviations', 'trace_notify', 'trace_recovery_messages']
DBMS: postgres;
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:33:01,044 INFO] [knob_selection.py:select_on_system_level:60] select_on_system_level - 270th response: {'ssl_dh_params_file': 0.1, 'ssl_ecdh_curve': 0.1, 'ssl_key_file': 0.1, 'ssl_library': 0.2, 'ssl_max_protocol_version': 0.1, 'ssl_min_protocol_version': 0.1, 'ssl_passphrase_command': 0.0, 'ssl_passphrase_command_supports_reload': 0.0, 'ssl_prefer_server_ciphers': 0.1, 'standard_conforming_strings': 0.0, 'statement_timeout': 0.7, 'stats_temp_directory': 0.3, 'superuser_reserved_connections': 0.2, 'synchronize_seqscans': 0.4, 'synchronous_commit': 1.0, 'synchronous_standby_names': 0.9, 'syslog_facility': 0.0, 'syslog_ident': 0.0, 'syslog_sequence_numbers': 0.0, 'syslog_split_messages': 0.0, 'tcp_keepalives_count': 0.1, 'tcp_keepalives_idle': 0.2, 'tcp_keepalives_interval': 0.1, 'tcp_user_timeout': 0.2, 'temp_buffers': 0.8, 'temp_file_limit': 0.6, 'temp_tablespaces': 0.8, 'timezone_abbreviations': 0.0, 'trace_notify': 0.0, 'trace_recovery_messages': 0.0}
[2025-06-02 19:33:01,046 INFO] [knob_selection.py:select_on_system_level:58] select_on_system_level - 300th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['trace_sort', 'track_activities', 'track_activity_query_size', 'track_commit_timestamp', 'track_counts', 'track_functions', 'track_io_timing', 'track_wal_io_timing', 'transaction_deferrable', 'transaction_isolation', 'transaction_read_only', 'transform_null_equals', 'unix_socket_directories', 'unix_socket_group', 'unix_socket_permissions', 'update_process_title', 'vacuum_cost_delay', 'vacuum_cost_limit', 'vacuum_cost_page_dirty', 'vacuum_cost_page_hit', 'vacuum_cost_page_miss', 'vacuum_defer_cleanup_age', 'vacuum_failsafe_age', 'vacuum_freeze_min_age', 'vacuum_freeze_table_age', 'vacuum_multixact_failsafe_age', 'vacuum_multixact_freeze_min_age', 'vacuum_multixact_freeze_table_age', 'wal_block_size', 'wal_buffers']
DBMS: postgres;
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:33:54,546 INFO] [knob_selection.py:select_on_system_level:60] select_on_system_level - 300th response: {'trace_sort': 0.1, 'track_activities': 0.7, 'track_activity_query_size': 0.3, 'track_commit_timestamp': 0.2, 'track_counts': 0.9, 'track_functions': 0.5, 'track_io_timing': 0.8, 'track_wal_io_timing': 0.7, 'transaction_deferrable': 0.3, 'transaction_isolation': 0.8, 'transaction_read_only': 0.2, 'transform_null_equals': 0.1, 'unix_socket_directories': 0.0, 'unix_socket_group': 0.0, 'unix_socket_permissions': 0.0, 'update_process_title': 0.1, 'vacuum_cost_delay': 0.8, 'vacuum_cost_limit': 0.8, 'vacuum_cost_page_dirty': 0.6, 'vacuum_cost_page_hit': 0.6, 'vacuum_cost_page_miss': 0.6, 'vacuum_defer_cleanup_age': 0.7, 'vacuum_failsafe_age': 0.3, 'vacuum_freeze_min_age': 0.7, 'vacuum_freeze_table_age': 0.7, 'vacuum_multixact_failsafe_age': 0.3, 'vacuum_multixact_freeze_min_age': 0.7, 'vacuum_multixact_freeze_table_age': 0.7, 'wal_block_size': 0.0, 'wal_buffers': 0.9}
[2025-06-02 19:33:54,548 INFO] [knob_selection.py:select_on_system_level:58] select_on_system_level - 330th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['wal_compression', 'wal_consistency_checking', 'wal_init_zero', 'wal_keep_size', 'wal_level', 'wal_log_hints', 'wal_receiver_create_temp_slot', 'wal_receiver_status_interval', 'wal_receiver_timeout', 'wal_recycle', 'wal_retrieve_retry_interval', 'wal_segment_size', 'wal_sender_timeout', 'wal_skip_threshold', 'wal_sync_method', 'wal_writer_delay', 'wal_writer_flush_after', 'work_mem', 'xmlbinary', 'xmloption', 'zero_damaged_pages']
DBMS: postgres;
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:34:39,193 INFO] [knob_selection.py:select_on_system_level:60] select_on_system_level - 330th response: {'wal_compression': 0.6, 'wal_consistency_checking': 0.1, 'wal_init_zero': 0.2, 'wal_keep_size': 0.7, 'wal_level': 0.9, 'wal_log_hints': 0.5, 'wal_receiver_create_temp_slot': 0.4, 'wal_receiver_status_interval': 0.2, 'wal_receiver_timeout': 0.2, 'wal_recycle': 0.3, 'wal_retrieve_retry_interval': 0.2, 'wal_segment_size': 0.6, 'wal_sender_timeout': 0.2, 'wal_skip_threshold': 0.7, 'wal_sync_method': 0.8, 'wal_writer_delay': 0.8, 'wal_writer_flush_after': 0.7, 'work_mem': 1.0, 'xmlbinary': 0.0, 'xmloption': 0.0, 'zero_damaged_pages': 0.1}
[2025-06-02 19:34:39,196 INFO] [knob_selection.py:select_on_workload_level:83] select_on_workload_level - 0th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Which knobs are important heavily depends on the workload type because different workloads result in different performance bottleneck.Given the workload type, analyze and identify the important knobs that significantly impact database performance when such workload is deployed.  Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['DateStyle', 'IntervalStyle', 'TimeZone', 'allow_in_place_tablespaces', 'allow_system_table_mods', 'application_name', 'archive_cleanup_command', 'archive_command', 'archive_mode', 'archive_timeout', 'array_nulls', 'authentication_timeout', 'autovacuum', 'autovacuum_analyze_scale_factor', 'autovacuum_analyze_threshold', 'autovacuum_freeze_max_age', 'autovacuum_max_workers', 'autovacuum_multixact_freeze_max_age', 'autovacuum_naptime', 'autovacuum_vacuum_cost_delay', 'autovacuum_vacuum_cost_limit', 'autovacuum_vacuum_insert_scale_factor', 'autovacuum_vacuum_insert_threshold', 'autovacuum_vacuum_scale_factor', 'autovacuum_vacuum_threshold', 'autovacuum_work_mem', 'backend_flush_after', 'backslash_quote', 'backtrace_functions', 'bgwriter_delay']
DBMS: postgres;
WORKLOAD TYPE:OLTP
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:35:15,241 INFO] [knob_selection.py:select_on_workload_level:85] select_on_workload_level - 0th response: {'DateStyle': 0.0, 'IntervalStyle': 0.0, 'TimeZone': 0.1, 'allow_in_place_tablespaces': 0.0, 'allow_system_table_mods': 0.0, 'application_name': 0.0, 'archive_cleanup_command': 0.1, 'archive_command': 0.8, 'archive_mode': 0.5, 'archive_timeout': 0.2, 'array_nulls': 0.0, 'authentication_timeout': 0.0, 'autovacuum': 1.0, 'autovacuum_analyze_scale_factor': 0.8, 'autovacuum_analyze_threshold': 0.8, 'autovacuum_freeze_max_age': 0.9, 'autovacuum_max_workers': 0.8, 'autovacuum_multixact_freeze_max_age': 0.8, 'autovacuum_naptime': 0.4, 'autovacuum_vacuum_cost_delay': 0.7, 'autovacuum_vacuum_cost_limit': 0.7, 'autovacuum_vacuum_insert_scale_factor': 0.8, 'autovacuum_vacuum_insert_threshold': 0.8, 'autovacuum_vacuum_scale_factor': 0.9, 'autovacuum_vacuum_threshold': 0.9, 'autovacuum_work_mem': 0.6, 'backend_flush_after': 0.2, 'backslash_quote': 0.0, 'backtrace_functions': 0.0, 'bgwriter_delay': 0.7}
[2025-06-02 19:35:15,244 INFO] [knob_selection.py:select_on_workload_level:83] select_on_workload_level - 30th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Which knobs are important heavily depends on the workload type because different workloads result in different performance bottleneck.Given the workload type, analyze and identify the important knobs that significantly impact database performance when such workload is deployed.  Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['bgwriter_flush_after', 'bgwriter_lru_maxpages', 'bgwriter_lru_multiplier', 'block_size', 'bonjour', 'bonjour_name', 'bytea_output', 'check_function_bodies', 'checkpoint_completion_target', 'checkpoint_flush_after', 'checkpoint_timeout', 'checkpoint_warning', 'client_connection_check_interval', 'client_encoding', 'client_min_messages', 'cluster_name', 'commit_delay', 'commit_siblings', 'compute_query_id', 'config_file', 'constraint_exclusion', 'cpu_index_tuple_cost', 'cpu_operator_cost', 'cpu_tuple_cost', 'cursor_tuple_fraction', 'data_checksums', 'data_directory', 'data_directory_mode', 'data_sync_retry', 'db_user_namespace']
DBMS: postgres;
WORKLOAD TYPE:OLTP
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:35:58,453 INFO] [knob_selection.py:select_on_workload_level:85] select_on_workload_level - 30th response: {'bgwriter_flush_after': 0.7, 'bgwriter_lru_maxpages': 0.9, 'bgwriter_lru_multiplier': 0.9, 'block_size': 0.0, 'bonjour': 0.0, 'bonjour_name': 0.0, 'bytea_output': 0.0, 'check_function_bodies': 0.0, 'checkpoint_completion_target': 0.95, 'checkpoint_flush_after': 0.7, 'checkpoint_timeout': 0.95, 'checkpoint_warning': 0.1, 'client_connection_check_interval': 0.1, 'client_encoding': 0.1, 'client_min_messages': 0.0, 'cluster_name': 0.0, 'commit_delay': 0.8, 'commit_siblings': 0.8, 'compute_query_id': 0.1, 'config_file': 0.0, 'constraint_exclusion': 0.3, 'cpu_index_tuple_cost': 0.2, 'cpu_operator_cost': 0.2, 'cpu_tuple_cost': 0.2, 'cursor_tuple_fraction': 0.2, 'data_checksums': 0.5, 'data_directory': 0.0, 'data_directory_mode': 0.0, 'data_sync_retry': 0.0, 'db_user_namespace': 0.0}
[2025-06-02 19:35:58,456 INFO] [knob_selection.py:select_on_workload_level:83] select_on_workload_level - 60th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Which knobs are important heavily depends on the workload type because different workloads result in different performance bottleneck.Given the workload type, analyze and identify the important knobs that significantly impact database performance when such workload is deployed.  Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['deadlock_timeout', 'debug_assertions', 'debug_discard_caches', 'debug_pretty_print', 'debug_print_parse', 'debug_print_plan', 'debug_print_rewritten', 'default_statistics_target', 'default_table_access_method', 'default_tablespace', 'default_text_search_config', 'default_toast_compression', 'default_transaction_deferrable', 'default_transaction_isolation', 'default_transaction_read_only', 'dynamic_library_path', 'dynamic_shared_memory_type', 'effective_cache_size', 'effective_io_concurrency', 'enable_async_append', 'enable_bitmapscan', 'enable_gathermerge', 'enable_hashagg', 'enable_hashjoin', 'enable_incremental_sort', 'enable_indexonlyscan', 'enable_indexscan', 'enable_material', 'enable_memoize', 'enable_mergejoin']
DBMS: postgres;
WORKLOAD TYPE:OLTP
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:36:56,414 INFO] [knob_selection.py:select_on_workload_level:85] select_on_workload_level - 60th response: {'deadlock_timeout': 0.8, 'debug_assertions': 0.05, 'debug_discard_caches': 0.05, 'debug_pretty_print': 0.0, 'debug_print_parse': 0.05, 'debug_print_plan': 0.05, 'debug_print_rewritten': 0.05, 'default_statistics_target': 0.7, 'default_table_access_method': 0.1, 'default_tablespace': 0.5, 'default_text_search_config': 0.1, 'default_toast_compression': 0.3, 'default_transaction_deferrable': 0.1, 'default_transaction_isolation': 0.8, 'default_transaction_read_only': 0.2, 'dynamic_library_path': 0.0, 'dynamic_shared_memory_type': 0.2, 'effective_cache_size': 0.9, 'effective_io_concurrency': 0.7, 'enable_async_append': 0.2, 'enable_bitmapscan': 0.4, 'enable_gathermerge': 0.3, 'enable_hashagg': 0.4, 'enable_hashjoin': 0.5, 'enable_incremental_sort': 0.4, 'enable_indexonlyscan': 0.7, 'enable_indexscan': 0.8, 'enable_material': 0.3, 'enable_memoize': 0.5, 'enable_mergejoin': 0.4}
[2025-06-02 19:36:56,417 INFO] [knob_selection.py:select_on_workload_level:83] select_on_workload_level - 90th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Which knobs are important heavily depends on the workload type because different workloads result in different performance bottleneck.Given the workload type, analyze and identify the important knobs that significantly impact database performance when such workload is deployed.  Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['enable_nestloop', 'enable_parallel_append', 'enable_parallel_hash', 'enable_partition_pruning', 'enable_partitionwise_aggregate', 'enable_partitionwise_join', 'enable_seqscan', 'enable_sort', 'enable_tidscan', 'escape_string_warning', 'event_source', 'exit_on_error', 'extension_destdir', 'external_pid_file', 'extra_float_digits', 'force_parallel_mode', 'from_collapse_limit', 'fsync', 'full_page_writes', 'geqo', 'geqo_effort', 'geqo_generations', 'geqo_pool_size', 'geqo_seed', 'geqo_selection_bias', 'geqo_threshold', 'gin_fuzzy_search_limit', 'gin_pending_list_limit', 'hash_mem_multiplier', 'hba_file']
DBMS: postgres;
WORKLOAD TYPE:OLTP
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:37:55,707 INFO] [knob_selection.py:select_on_workload_level:85] select_on_workload_level - 90th response: {'enable_nestloop': 0.9, 'enable_parallel_append': 0.2, 'enable_parallel_hash': 0.3, 'enable_partition_pruning': 0.7, 'enable_partitionwise_aggregate': 0.3, 'enable_partitionwise_join': 0.3, 'enable_seqscan': 0.9, 'enable_sort': 0.9, 'enable_tidscan': 0.2, 'escape_string_warning': 0.0, 'event_source': 0.0, 'exit_on_error': 0.0, 'extension_destdir': 0.0, 'external_pid_file': 0.0, 'extra_float_digits': 0.0, 'force_parallel_mode': 0.1, 'from_collapse_limit': 0.5, 'fsync': 1.0, 'full_page_writes': 0.8, 'geqo': 0.2, 'geqo_effort': 0.1, 'geqo_generations': 0.1, 'geqo_pool_size': 0.1, 'geqo_seed': 0.0, 'geqo_selection_bias': 0.1, 'geqo_threshold': 0.4, 'gin_fuzzy_search_limit': 0.1, 'gin_pending_list_limit': 0.6, 'hash_mem_multiplier': 0.5, 'hba_file': 0.0}
[2025-06-02 19:37:55,710 INFO] [knob_selection.py:select_on_workload_level:83] select_on_workload_level - 120th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Which knobs are important heavily depends on the workload type because different workloads result in different performance bottleneck.Given the workload type, analyze and identify the important knobs that significantly impact database performance when such workload is deployed.  Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['hot_standby', 'hot_standby_feedback', 'huge_page_size', 'huge_pages', 'ident_file', 'idle_in_transaction_session_timeout', 'idle_session_timeout', 'ignore_checksum_failure', 'ignore_invalid_pages', 'ignore_system_indexes', 'in_hot_standby', 'integer_datetimes', 'jit', 'jit_above_cost', 'jit_debugging_support', 'jit_dump_bitcode', 'jit_expressions', 'jit_inline_above_cost', 'jit_optimize_above_cost', 'jit_profiling_support', 'jit_provider', 'jit_tuple_deforming', 'join_collapse_limit', 'krb_caseins_users', 'krb_server_keyfile', 'lc_collate', 'lc_ctype', 'lc_messages', 'lc_monetary', 'lc_numeric']
DBMS: postgres;
WORKLOAD TYPE:OLTP
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:38:40,456 INFO] [knob_selection.py:select_on_workload_level:85] select_on_workload_level - 120th response: {'hot_standby': 0.3, 'hot_standby_feedback': 0.5, 'huge_page_size': 0.0, 'huge_pages': 0.7, 'ident_file': 0.0, 'idle_in_transaction_session_timeout': 0.9, 'idle_session_timeout': 0.6, 'ignore_checksum_failure': 0.0, 'ignore_invalid_pages': 0.0, 'ignore_system_indexes': 0.0, 'in_hot_standby': 0.0, 'integer_datetimes': 0.1, 'jit': 0.4, 'jit_above_cost': 0.5, 'jit_debugging_support': 0.0, 'jit_dump_bitcode': 0.0, 'jit_expressions': 0.4, 'jit_inline_above_cost': 0.3, 'jit_optimize_above_cost': 0.3, 'jit_profiling_support': 0.0, 'jit_provider': 0.1, 'jit_tuple_deforming': 0.4, 'join_collapse_limit': 0.3, 'krb_caseins_users': 0.0, 'krb_server_keyfile': 0.0, 'lc_collate': 0.7, 'lc_ctype': 0.7, 'lc_messages': 0.0, 'lc_monetary': 0.0, 'lc_numeric': 0.0}
[2025-06-02 19:38:40,459 INFO] [knob_selection.py:select_on_workload_level:83] select_on_workload_level - 150th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Which knobs are important heavily depends on the workload type because different workloads result in different performance bottleneck.Given the workload type, analyze and identify the important knobs that significantly impact database performance when such workload is deployed.  Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['lc_time', 'listen_addresses', 'lo_compat_privileges', 'local_preload_libraries', 'lock_timeout', 'log_autovacuum_min_duration', 'log_checkpoints', 'log_connections', 'log_destination', 'log_directory', 'log_disconnections', 'log_duration', 'log_error_verbosity', 'log_executor_stats', 'log_file_mode', 'log_filename', 'log_hostname', 'log_line_prefix', 'log_lock_waits', 'log_min_duration_sample', 'log_min_duration_statement', 'log_min_error_statement', 'log_min_messages', 'log_parameter_max_length', 'log_parameter_max_length_on_error', 'log_parser_stats', 'log_planner_stats', 'log_recovery_conflict_waits', 'log_replication_commands', 'log_rotation_age']
DBMS: postgres;
WORKLOAD TYPE:OLTP
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:39:33,500 INFO] [knob_selection.py:select_on_workload_level:85] select_on_workload_level - 150th response: {'lc_time': 0.0, 'listen_addresses': 0.1, 'lo_compat_privileges': 0.0, 'local_preload_libraries': 0.2, 'lock_timeout': 0.8, 'log_autovacuum_min_duration': 0.7, 'log_checkpoints': 0.7, 'log_connections': 0.2, 'log_destination': 0.0, 'log_directory': 0.0, 'log_disconnections': 0.2, 'log_duration': 0.1, 'log_error_verbosity': 0.1, 'log_executor_stats': 0.1, 'log_file_mode': 0.0, 'log_filename': 0.0, 'log_hostname': 0.2, 'log_line_prefix': 0.0, 'log_lock_waits': 0.9, 'log_min_duration_sample': 0.6, 'log_min_duration_statement': 0.9, 'log_min_error_statement': 0.3, 'log_min_messages': 0.1, 'log_parameter_max_length': 0.1, 'log_parameter_max_length_on_error': 0.1, 'log_parser_stats': 0.1, 'log_planner_stats': 0.1, 'log_recovery_conflict_waits': 0.4, 'log_replication_commands': 0.1, 'log_rotation_age': 0.0}
[2025-06-02 19:39:33,503 INFO] [knob_selection.py:select_on_workload_level:83] select_on_workload_level - 180th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Which knobs are important heavily depends on the workload type because different workloads result in different performance bottleneck.Given the workload type, analyze and identify the important knobs that significantly impact database performance when such workload is deployed.  Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['log_rotation_size', 'log_statement', 'log_statement_sample_rate', 'log_statement_stats', 'log_temp_files', 'log_timezone', 'log_transaction_sample_rate', 'log_truncate_on_rotation', 'logging_collector', 'logical_decoding_work_mem', 'maintenance_io_concurrency', 'maintenance_work_mem', 'max_connections', 'max_files_per_process', 'max_function_args', 'max_identifier_length', 'max_index_keys', 'max_locks_per_transaction', 'max_logical_replication_workers', 'max_parallel_maintenance_workers', 'max_parallel_workers', 'max_parallel_workers_per_gather', 'max_pred_locks_per_page', 'max_pred_locks_per_relation', 'max_pred_locks_per_transaction', 'max_prepared_transactions', 'max_replication_slots', 'max_slot_wal_keep_size', 'max_stack_depth', 'max_standby_archive_delay']
DBMS: postgres;
WORKLOAD TYPE:OLTP
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:40:27,466 INFO] [knob_selection.py:select_on_workload_level:85] select_on_workload_level - 180th response: {'log_rotation_size': 0.1, 'log_statement': 0.7, 'log_statement_sample_rate': 0.2, 'log_statement_stats': 0.1, 'log_temp_files': 0.35, 'log_timezone': 0.0, 'log_transaction_sample_rate': 0.1, 'log_truncate_on_rotation': 0.0, 'logging_collector': 0.1, 'logical_decoding_work_mem': 0.3, 'maintenance_io_concurrency': 0.7, 'maintenance_work_mem': 0.9, 'max_connections': 0.95, 'max_files_per_process': 0.05, 'max_function_args': 0.0, 'max_identifier_length': 0.0, 'max_index_keys': 0.0, 'max_locks_per_transaction': 0.5, 'max_logical_replication_workers': 0.3, 'max_parallel_maintenance_workers': 0.6, 'max_parallel_workers': 0.3, 'max_parallel_workers_per_gather': 0.25, 'max_pred_locks_per_page': 0.0, 'max_pred_locks_per_relation': 0.0, 'max_pred_locks_per_transaction': 0.0, 'max_prepared_transactions': 0.2, 'max_replication_slots': 0.7, 'max_slot_wal_keep_size': 0.8, 'max_stack_depth': 0.0, 'max_standby_archive_delay': 0.4}
[2025-06-02 19:40:27,469 INFO] [knob_selection.py:select_on_workload_level:83] select_on_workload_level - 210th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Which knobs are important heavily depends on the workload type because different workloads result in different performance bottleneck.Given the workload type, analyze and identify the important knobs that significantly impact database performance when such workload is deployed.  Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['max_standby_streaming_delay', 'max_sync_workers_per_subscription', 'max_wal_senders', 'max_wal_size', 'max_worker_processes', 'min_dynamic_shared_memory', 'min_parallel_index_scan_size', 'min_parallel_table_scan_size', 'min_wal_size', 'old_snapshot_threshold', 'parallel_leader_participation', 'parallel_setup_cost', 'parallel_tuple_cost', 'password_encryption', 'pg_stat_statements.max', 'pg_stat_statements.save', 'pg_stat_statements.track', 'pg_stat_statements.track_planning', 'pg_stat_statements.track_utility', 'plan_cache_mode', 'port', 'post_auth_delay', 'pre_auth_delay', 'primary_conninfo', 'primary_slot_name', 'promote_trigger_file', 'quote_all_identifiers', 'random_page_cost', 'recovery_end_command', 'recovery_init_sync_method']
DBMS: postgres;
WORKLOAD TYPE:OLTP
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:41:30,854 INFO] [knob_selection.py:select_on_workload_level:85] select_on_workload_level - 210th response: {'max_standby_streaming_delay': 0.5, 'max_sync_workers_per_subscription': 0.1, 'max_wal_senders': 0.8, 'max_wal_size': 0.9, 'max_worker_processes': 0.75, 'min_dynamic_shared_memory': 0.0, 'min_parallel_index_scan_size': 0.1, 'min_parallel_table_scan_size': 0.1, 'min_wal_size': 0.75, 'old_snapshot_threshold': 0.7, 'parallel_leader_participation': 0.1, 'parallel_setup_cost': 0.2, 'parallel_tuple_cost': 0.1, 'password_encryption': 0.0, 'pg_stat_statements.max': 0.8, 'pg_stat_statements.save': 0.4, 'pg_stat_statements.track': 0.8, 'pg_stat_statements.track_planning': 0.5, 'pg_stat_statements.track_utility': 0.1, 'plan_cache_mode': 0.7, 'port': 0.0, 'post_auth_delay': 0.0, 'pre_auth_delay': 0.0, 'primary_conninfo': 0.0, 'primary_slot_name': 0.7, 'promote_trigger_file': 0.0, 'quote_all_identifiers': 0.0, 'random_page_cost': 0.9, 'recovery_end_command': 0.0, 'recovery_init_sync_method': 0.0}
[2025-06-02 19:41:30,857 INFO] [knob_selection.py:select_on_workload_level:83] select_on_workload_level - 240th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Which knobs are important heavily depends on the workload type because different workloads result in different performance bottleneck.Given the workload type, analyze and identify the important knobs that significantly impact database performance when such workload is deployed.  Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['recovery_min_apply_delay', 'recovery_target', 'recovery_target_action', 'recovery_target_inclusive', 'recovery_target_lsn', 'recovery_target_name', 'recovery_target_time', 'recovery_target_timeline', 'recovery_target_xid', 'remove_temp_files_after_crash', 'restart_after_crash', 'restore_command', 'row_security', 'search_path', 'segment_size', 'seq_page_cost', 'server_encoding', 'server_version', 'server_version_num', 'session_preload_libraries', 'session_replication_role', 'shared_buffers', 'shared_memory_type', 'shared_preload_libraries', 'ssl', 'ssl_ca_file', 'ssl_cert_file', 'ssl_ciphers', 'ssl_crl_dir', 'ssl_crl_file']
DBMS: postgres;
WORKLOAD TYPE:OLTP
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:42:11,219 INFO] [knob_selection.py:select_on_workload_level:85] select_on_workload_level - 240th response: {'recovery_min_apply_delay': 0.0, 'recovery_target': 0.0, 'recovery_target_action': 0.0, 'recovery_target_inclusive': 0.0, 'recovery_target_lsn': 0.0, 'recovery_target_name': 0.0, 'recovery_target_time': 0.0, 'recovery_target_timeline': 0.0, 'recovery_target_xid': 0.0, 'remove_temp_files_after_crash': 0.0, 'restart_after_crash': 0.0, 'restore_command': 0.0, 'row_security': 0.5, 'search_path': 0.1, 'segment_size': 0.0, 'seq_page_cost': 0.7, 'server_encoding': 0.0, 'server_version': 0.0, 'server_version_num': 0.0, 'session_preload_libraries': 0.3, 'session_replication_role': 0.0, 'shared_buffers': 1.0, 'shared_memory_type': 0.0, 'shared_preload_libraries': 0.8, 'ssl': 0.1, 'ssl_ca_file': 0.0, 'ssl_cert_file': 0.0, 'ssl_ciphers': 0.0, 'ssl_crl_dir': 0.0, 'ssl_crl_file': 0.0}
[2025-06-02 19:42:11,222 INFO] [knob_selection.py:select_on_workload_level:83] select_on_workload_level - 270th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Which knobs are important heavily depends on the workload type because different workloads result in different performance bottleneck.Given the workload type, analyze and identify the important knobs that significantly impact database performance when such workload is deployed.  Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['ssl_dh_params_file', 'ssl_ecdh_curve', 'ssl_key_file', 'ssl_library', 'ssl_max_protocol_version', 'ssl_min_protocol_version', 'ssl_passphrase_command', 'ssl_passphrase_command_supports_reload', 'ssl_prefer_server_ciphers', 'standard_conforming_strings', 'statement_timeout', 'stats_temp_directory', 'superuser_reserved_connections', 'synchronize_seqscans', 'synchronous_commit', 'synchronous_standby_names', 'syslog_facility', 'syslog_ident', 'syslog_sequence_numbers', 'syslog_split_messages', 'tcp_keepalives_count', 'tcp_keepalives_idle', 'tcp_keepalives_interval', 'tcp_user_timeout', 'temp_buffers', 'temp_file_limit', 'temp_tablespaces', 'timezone_abbreviations', 'trace_notify', 'trace_recovery_messages']
DBMS: postgres;
WORKLOAD TYPE:OLTP
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:43:26,876 INFO] [knob_selection.py:select_on_workload_level:85] select_on_workload_level - 270th response: {'ssl_dh_params_file': 0.1, 'ssl_ecdh_curve': 0.1, 'ssl_key_file': 0.0, 'ssl_library': 0.0, 'ssl_max_protocol_version': 0.1, 'ssl_min_protocol_version': 0.1, 'ssl_passphrase_command': 0.0, 'ssl_passphrase_command_supports_reload': 0.0, 'ssl_prefer_server_ciphers': 0.1, 'standard_conforming_strings': 0.0, 'statement_timeout': 0.9, 'stats_temp_directory': 0.0, 'superuser_reserved_connections': 0.2, 'synchronize_seqscans': 0.1, 'synchronous_commit': 0.95, 'synchronous_standby_names': 0.8, 'syslog_facility': 0.0, 'syslog_ident': 0.0, 'syslog_sequence_numbers': 0.0, 'syslog_split_messages': 0.0, 'tcp_keepalives_count': 0.4, 'tcp_keepalives_idle': 0.4, 'tcp_keepalives_interval': 0.4, 'tcp_user_timeout': 0.4, 'temp_buffers': 0.6, 'temp_file_limit': 0.2, 'temp_tablespaces': 0.5, 'timezone_abbreviations': 0.0, 'trace_notify': 0.0, 'trace_recovery_messages': 0.0}
[2025-06-02 19:43:26,878 INFO] [knob_selection.py:select_on_workload_level:83] select_on_workload_level - 300th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Which knobs are important heavily depends on the workload type because different workloads result in different performance bottleneck.Given the workload type, analyze and identify the important knobs that significantly impact database performance when such workload is deployed.  Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['trace_sort', 'track_activities', 'track_activity_query_size', 'track_commit_timestamp', 'track_counts', 'track_functions', 'track_io_timing', 'track_wal_io_timing', 'transaction_deferrable', 'transaction_isolation', 'transaction_read_only', 'transform_null_equals', 'unix_socket_directories', 'unix_socket_group', 'unix_socket_permissions', 'update_process_title', 'vacuum_cost_delay', 'vacuum_cost_limit', 'vacuum_cost_page_dirty', 'vacuum_cost_page_hit', 'vacuum_cost_page_miss', 'vacuum_defer_cleanup_age', 'vacuum_failsafe_age', 'vacuum_freeze_min_age', 'vacuum_freeze_table_age', 'vacuum_multixact_failsafe_age', 'vacuum_multixact_freeze_min_age', 'vacuum_multixact_freeze_table_age', 'wal_block_size', 'wal_buffers']
DBMS: postgres;
WORKLOAD TYPE:OLTP
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:44:45,111 INFO] [knob_selection.py:select_on_workload_level:85] select_on_workload_level - 300th response: {'trace_sort': 0.1, 'track_activities': 0.3, 'track_activity_query_size': 0.1, 'track_commit_timestamp': 0.7, 'track_counts': 0.9, 'track_functions': 0.3, 'track_io_timing': 0.6, 'track_wal_io_timing': 0.6, 'transaction_deferrable': 0.3, 'transaction_isolation': 0.95, 'transaction_read_only': 0.4, 'transform_null_equals': 0.0, 'unix_socket_directories': 0.1, 'unix_socket_group': 0.0, 'unix_socket_permissions': 0.0, 'update_process_title': 0.2, 'vacuum_cost_delay': 0.9, 'vacuum_cost_limit': 0.9, 'vacuum_cost_page_dirty': 0.8, 'vacuum_cost_page_hit': 0.8, 'vacuum_cost_page_miss': 0.8, 'vacuum_defer_cleanup_age': 0.4, 'vacuum_failsafe_age': 0.1, 'vacuum_freeze_min_age': 0.7, 'vacuum_freeze_table_age': 0.7, 'vacuum_multixact_failsafe_age': 0.1, 'vacuum_multixact_freeze_min_age': 0.6, 'vacuum_multixact_freeze_table_age': 0.6, 'wal_block_size': 0.0, 'wal_buffers': 0.95}
[2025-06-02 19:44:45,114 INFO] [knob_selection.py:select_on_workload_level:83] select_on_workload_level - 330th prompt: 
You are an experienced DBA and your will determine which knobs are worth tuning. You only tune knobs that have a significant impact on DBMS performance and the target DBMS is postgres. Which knobs are important heavily depends on the workload type because different workloads result in different performance bottleneck.Given the workload type, analyze and identify the important knobs that significantly impact database performance when such workload is deployed.  Given the following candidate knobs, score the importance for each knob between 0 and 1, with a higher value indicating that it is more likey to impact postgres performance significantly. 
Candidate knobs: ['wal_compression', 'wal_consistency_checking', 'wal_init_zero', 'wal_keep_size', 'wal_level', 'wal_log_hints', 'wal_receiver_create_temp_slot', 'wal_receiver_status_interval', 'wal_receiver_timeout', 'wal_recycle', 'wal_retrieve_retry_interval', 'wal_segment_size', 'wal_sender_timeout', 'wal_skip_threshold', 'wal_sync_method', 'wal_writer_delay', 'wal_writer_flush_after', 'work_mem', 'xmlbinary', 'xmloption', 'zero_damaged_pages']
DBMS: postgres;
WORKLOAD TYPE:OLTP
Now let us think step by step and give me your scoring of all the candidate knobs in json format:
{
    "knob_name": {score}    // fill "score" with a number between 0 and 1
}
If no knobs are suggested, just fill "knob_list" with "None" and also return result in json format. 

[2025-06-02 19:45:32,318 INFO] [knob_selection.py:select_on_workload_level:85] select_on_workload_level - 330th response: {'wal_compression': 0.7, 'wal_consistency_checking': 0.1, 'wal_init_zero': 0.4, 'wal_keep_size': 0.6, 'wal_level': 0.8, 'wal_log_hints': 0.5, 'wal_receiver_create_temp_slot': 0.2, 'wal_receiver_status_interval': 0.3, 'wal_receiver_timeout': 0.2, 'wal_recycle': 0.3, 'wal_retrieve_retry_interval': 0.2, 'wal_segment_size': 0.3, 'wal_sender_timeout': 0.3, 'wal_skip_threshold': 0.1, 'wal_sync_method': 0.7, 'wal_writer_delay': 0.9, 'wal_writer_flush_after': 0.8, 'work_mem': 0.8, 'xmlbinary': 0.0, 'xmloption': 0.0, 'zero_damaged_pages': 0.0}
[2025-06-02 19:45:32,322 INFO] [knob_selection.py:select_interdependent_all_knobs:187] select_interdependent_all_knobs - prompt: 
I am solving database configuration tuning problem. 
There exist dependencies between knobs, which are mentioned in manuals and act as your training data.   
For example, the official PostgreSQL document suggests “Larger settings for 'shared_buffers' usually require a corresponding increase in 'checkpoint_segments',
indicating that we should consider the two knobs at the same time.
TASK:
Now there is a collection of knobs that need to be adjusted, but we may have overlooked 
knobs that are related to these knobs (i.e., knobs that need to be adjusted at the same time, according to past knowledge). 
Please add the knobs that are interdependent with these knobs in the set according to your knowledge. 
NOTE:
If the given DBMS is 'postgres', the interdependent knobs should be supported by PostgreSQL;
If the given DBMS is 'mysql', the interdependent knobs should be supported by Mysql;
KNOB COLLECTION:['shared_buffers', 'fsync', 'autovacuum', 'synchronous_commit', 'checkpoint_completion_target', 'checkpoint_timeout', 'max_connections', 'wal_buffers', 'log_min_duration_statement', 'effective_cache_size', 'track_counts', 'log_lock_waits', 'random_page_cost', 'maintenance_work_mem', 'enable_seqscan', 'max_wal_size', 'work_mem', 'autovacuum_vacuum_threshold', 'autovacuum_vacuum_scale_factor', 'transaction_isolation', 'enable_indexscan', 'vacuum_cost_delay', 'autovacuum_max_workers', 'synchronous_standby_names', 'wal_level', 'vacuum_cost_limit', 'wal_writer_delay', 'autovacuum_analyze_scale_factor', 'autovacuum_analyze_threshold', 'autovacuum_freeze_max_age', 'lock_timeout', 'shared_preload_libraries', 'statement_timeout', 'max_slot_wal_keep_size', 'autovacuum_vacuum_cost_delay', 'default_transaction_isolation', 'autovacuum_vacuum_cost_limit', 'enable_partition_pruning', 'bgwriter_lru_maxpages', 'enable_nestloop', 'enable_sort', 'full_page_writes', 'idle_in_transaction_session_timeout', 'max_worker_processes', 'autovacuum_multixact_freeze_max_age', 'autovacuum_vacuum_insert_threshold', 'autovacuum_vacuum_insert_scale_factor', 'bgwriter_delay', 'seq_page_cost', 'enable_indexonlyscan']
DBMS:postgres
Now let us think step by step and give me result in json format, 
{
   "think_procedure": {procedure}    // fill "procedure" with your "think step by step procedure"
   "knob_list": {knob_list}          // fill "knob_list" with a list of the name of interdependent knobs
}
If no knobs are interdependent, just fill "knob_list" with "None". 

[2025-06-02 19:46:44,511 INFO] [knob_selection.py:select_interdependent_all_knobs:189] select_interdependent_all_knobs - response: {'think_procedure': "1. Reviewed the provided list of PostgreSQL knobs.\n2. For each knob in the initial collection, identified other PostgreSQL configuration parameters that are commonly tuned in conjunction or have direct dependencies. This involved considering various aspects of database operation such as memory management, Write-Ahead Logging (WAL) and checkpointing, autovacuum processes, query planning and execution, logging, connection management, and replication.\n3. Specifically considered known relationships, for example:\n    - `fsync`'s relation to `wal_sync_method`.\n    - `autovacuum` settings' relation to `autovacuum_naptime`, `log_autovacuum_min_duration`, and `autovacuum_work_mem`.\n    - `synchronous_commit`'s relation to `commit_delay` and `commit_siblings`.\n    - `max_connections`' impact on resources, thus relating to `max_prepared_transactions` and `max_locks_per_transaction`.\n    - Logging parameters like `log_min_duration_statement` being part of a broader logging configuration including `log_statement` and `log_duration`.\n    - Timeout settings like `lock_timeout` being related to `deadlock_timeout`.\n    - Planner cost parameters (`random_page_cost`, `seq_page_cost`) being part of a group including `cpu_tuple_cost`, `cpu_index_tuple_cost`, `cpu_operator_cost`.\n    - The set of `enable_*` planner flags (e.g., `enable_seqscan`) having other related flags like `enable_bitmapscan`.\n    - `max_wal_size` being related to `min_wal_size` for WAL management.\n    - `vacuum_cost_delay` and `vacuum_cost_limit` having underlying components like `vacuum_cost_page_hit/miss/dirty`.\n    - `wal_level`'s importance for replication and archiving, linking it to `archive_mode`, `archive_command`, and `max_wal_senders`.\n    - `autovacuum_freeze_max_age` and `autovacuum_multixact_freeze_max_age` having related manual vacuum parameters like `vacuum_freeze_min_age` and `vacuum_multixact_freeze_min_age`.\n    - `shared_preload_libraries` potentially loading modules like `pg_stat_statements`, which has its own set of parameters (e.g., `pg_stat_statements.max`, `pg_stat_statements.track`).\n    - `max_slot_wal_keep_size` being related to `wal_keep_size` for managing WAL for replication slots.\n    - `max_worker_processes` being a global limit for workers, thus related to specific parallel worker counts like `max_parallel_workers`.\n4. Compiled a list of all such identified interdependent knobs.\n5. Filtered this list to retain only those knobs not already present in the initial `KNOB COLLECTION` provided by the user.\n6. Ensured that all suggested additional knobs are valid and supported PostgreSQL configuration parameters.\n7. The final list consists of these newly identified interdependent knobs.", 'knob_list': ['wal_sync_method', 'autovacuum_naptime', 'log_autovacuum_min_duration', 'autovacuum_work_mem', 'commit_delay', 'commit_siblings', 'max_prepared_transactions', 'max_locks_per_transaction', 'log_statement', 'log_duration', 'deadlock_timeout', 'cpu_tuple_cost', 'cpu_index_tuple_cost', 'cpu_operator_cost', 'enable_bitmapscan', 'enable_tidscan', 'enable_hashjoin', 'enable_mergejoin', 'min_wal_size', 'vacuum_cost_page_hit', 'vacuum_cost_page_miss', 'vacuum_cost_page_dirty', 'archive_mode', 'archive_command', 'max_wal_senders', 'vacuum_freeze_min_age', 'vacuum_freeze_table_age', 'pg_stat_statements.max', 'pg_stat_statements.track', 'pg_stat_statements.track_utility', 'pg_stat_statements.save', 'wal_keep_size', 'max_parallel_workers', 'max_parallel_maintenance_workers', 'max_parallel_workers_per_gather', 'vacuum_multixact_freeze_min_age', 'vacuum_multixact_freeze_table_age']}
[2025-06-02 19:46:44,516 INFO] [knob_selection.py:select_interdependent_all_knobs:200] accumulated token:17458, accumulated input token: 9014, accumulated output token: 8444,  accumulated money:0
